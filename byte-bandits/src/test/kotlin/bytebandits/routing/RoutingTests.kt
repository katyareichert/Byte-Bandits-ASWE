package bytebandits.routing

import bytebandits.models.WebSimpleFileRequest
import bytebandits.module
import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.testing.*
import java.util.*
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue

// Tests partialy generated by VS Code Copilot plugin
class RoutingTests {

  val sampleJWT =
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJqd3QtYXVkaWVuY2UiLCJpc3MiOiJodHRwczovL2p3dC1wcm92aWRlci1kb21haW4v" +
            "IiwiY2xpZW50SWQiOiJzYW1wbGUiLCJleHAiOjE3MDIyNTc3NDl9.aWq9_K1Ey63s1wVA-NcdzztH-Hnd-Nh_UmkrL2e9Id8"


  @Test
  fun `invalid endpoint should fail`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Get, "storage/notreal").apply {
        assertEquals(HttpStatusCode.NotFound, response.status())
      }
    }
  }

  @Test
  fun `non auth get should fail`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Get, "storage/Get/test").apply {
        assertEquals(HttpStatusCode.Unauthorized, response.status())
      }
    }
  }

  @Test
  fun `file not found should fail with badgateway`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Get, "storage/Get/test") {
        addHeader("Authorization", "Bearer $sampleJWT")
      }.apply {
        assertEquals(HttpStatusCode.BadGateway, response.status())
      }
    }
  }

  @Test
  fun `submit should work`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Post, "storage/Submit/") {

        addHeader("Authorization", "Bearer $sampleJWT")
        val obj = WebSimpleFileRequest("dGhpcyBpcyBhIHRlc3Q=", "test", "value")
        val gson = Gson()
        addHeader("Content-Type","application/json")
        setBody(gson.toJson(obj))
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
      }

      handleRequest(HttpMethod.Get, "storage/Get/value/test") {
        addHeader("Authorization", "Bearer $sampleJWT")
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
      }

      handleRequest(HttpMethod.Get, "storage/Delete/value/test") {
        addHeader("Authorization", "Bearer $sampleJWT")
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
      }
    }
  }

  @Test
  fun `hash should work`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Post, "hash/Check/54b0c58c7ce9f2a8b551351102ee0938") {

        addHeader("Authorization", "Bearer $sampleJWT")
        val obj = WebSimpleFileRequest("dGhpcyBpcyBhIHRlc3Q=", "test", "value")
        val gson = Gson()
        addHeader("Content-Type","application/json")
        setBody(gson.toJson(obj))
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
        assertEquals("Hashes match", response.content)
      }

      handleRequest(HttpMethod.Post, "hash/Check/54b0c58c7ce9f2a8b551351104ee0931") {

        addHeader("Authorization", "Bearer $sampleJWT")
        val obj = WebSimpleFileRequest("dGhpcyBpcyBhIHRlc3Q=", "test", "value")
        val gson = Gson()
        addHeader("Content-Type","application/json")
        setBody(gson.toJson(obj))
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
        assertEquals("Hashes do not match", response.content)
      }
    }
  }

  @Test
  fun `hash store and get should work`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Post, "hash/Get/") {

        addHeader("Authorization", "Bearer $sampleJWT")
        val obj = WebSimpleFileRequest("dGhpcyBpcyBhIHRlc3Q=", "test", "value")
        val gson = Gson()
        addHeader("Content-Type","application/json")
        setBody(gson.toJson(obj))
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
        assertEquals("54b0c58c7ce9f2a8b551351102ee0938", response.content)
      }

      handleRequest(HttpMethod.Post, "hash/Store/") {

        addHeader("Authorization", "Bearer $sampleJWT")
        val obj = WebSimpleFileRequest("dGhpcyBpcyBhIHRlc3Q=", "test", "value")
        val gson = Gson()
        addHeader("Content-Type","application/json")
        setBody(gson.toJson(obj))
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
      }

      handleRequest(HttpMethod.Get, "hash/Retrieve/test/54b0c58c7ce9f2a8b551351102ee0938") {
        addHeader("Authorization", "Bearer $sampleJWT")
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
        assertEquals("this is a test", response.content)
      }
    }
  }

  @Test
  fun `password wallet store and retrieve should work`() {
    withTestApplication(Application::module) {
      // Test Store Password Entry
      handleRequest(HttpMethod.Get, "/pwdWallet/Store/example.com/username123/password123/userID123") {
        addHeader("Authorization", "Bearer $sampleJWT")
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
        assertEquals("Password saved", response.content)
      }

      // Test Retrieve Password Entry
      handleRequest(HttpMethod.Get, "/pwdWallet/Retrieve/example.com/userID123") {
        addHeader("Authorization", "Bearer $sampleJWT")
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
        val expectedResponse = "Site: example.com\nUsername: username123\nPassword: password123\n"
        assertEquals(expectedResponse, response.content)
      }
    }
  }

  @Test
  fun `virus checker should check files correctly`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Post, "/virusChecker/CheckFile/") {
        // Set up headers and body for the request
        addHeader("Content-Type", "application/json")
        addHeader("Authorization", "Bearer $sampleJWT")

        val sampleFileContent = Base64.getEncoder().encodeToString("sample file content".toByteArray())
        val fileRequest = WebSimpleFileRequest(sampleFileContent, "userID123", "testFile.txt")
        val gson = Gson()

        setBody(gson.toJson(fileRequest))
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
      }
    }
  }

  @Test
  fun `file encryption and decryption should work correctly`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Post, "/file/encrypt/") {
        addHeader("Content-Type", "application/json")
        addHeader("Authorization", "Bearer $sampleJWT")

        val sampleFileContent = Base64.getEncoder().encodeToString("sample file content".toByteArray())
        val fileRequest = WebSimpleFileRequest(sampleFileContent, "userID123", "testFile.txt")
        val gson = Gson()

        setBody(gson.toJson(fileRequest))
      }.apply {
        assertEquals(HttpStatusCode.OK, response.status())
        val encryptedContent = response.byteContent
      }

      // Test File Decryption
      handleRequest(HttpMethod.Post, "/file/decrypt/") {
        addHeader("Content-Type", "application/json")
        addHeader("Authorization", "Bearer $sampleJWT")

        val encryptedContent = Base64.getEncoder().encodeToString("should not work".toByteArray())
        val encryptedFileRequest = WebSimpleFileRequest(encryptedContent, "userID123", "testFile.txt")
        val gson = Gson()

        setBody(gson.toJson(encryptedFileRequest))
      }.apply {
        assertEquals(HttpStatusCode.BadGateway, response.status())
      }
    }
  }


  @Test
  fun `gen password`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Get, "password/Get/").apply {
        assertEquals(HttpStatusCode.OK, response.status())
        assertTrue { response.content!!.length > 0 }
      }
    }
  }

  @Test
  fun `gen password 19 chars`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Get, "password/Get/19").apply {
        assertEquals(HttpStatusCode.OK, response.status())
        assertTrue { response.content!!.length == 19 }
      }
    }
  }


  @Test
  fun `gen passkey`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Get, "passKey/Get/").apply {
        assertEquals(HttpStatusCode.OK, response.status())
      }
    }
  }

  @Test
  fun `gen passkey 15`() {
    withTestApplication(Application::module) {
      handleRequest(HttpMethod.Get, "passKey/Get/15").apply {
        assertEquals(HttpStatusCode.OK, response.status())
        //assertTrue { response.byteContent!!.size == 15 }
      }
    }
  }
}
