openapi: "3.0.3"
info:
  title: "Security Tools API"
  description: "This Security Tools Service will provide computer security-oriented tools.
    Among the main features will be: basic antivirus check for files, generation of digital
    certificates and signature verification, file encryption and decryption, secure file
    archive, password and key generation, file integrity protection, and a password wallet.\n\n
    Created by Team ByteBandits\n
        - Aryana Mohammadi (am5723)\n
        - Hugo Matousek (hm2953)\n
        - Karthik Guda (kg2982)\n
        - Katya Reichert (kpr2120)
    "
  version: "1.0.0"
servers:
  -   url: "http://ec2-107-22-87-117.compute-1.amazonaws.com:8080/"
# partially autogenerated 
paths:
  /storage/Submit:
    post:
      summary: Submit a simple file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSimpleFileRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: "This worked: true"
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /storage/Get/{file_name}:
    get:
      summary: "Get file from storage"
      parameters:
        - in: header
          name: Client ID
          schema:
            type: string
            format: uuid
          required: true
        - name: file_name
          in: path
          description: Name of File to Retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              examples:
                Success:
                  value: "True"
                FileNotFound:
                  value: "File does not exist"
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /storage/Delete/{fileName}/{userId}:
    get:
      summary: Deletes a stored file
      parameters:
        - in: path
          name: fileName
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: false
          schema:
            type: string
      responses:
        '200':
          description: File successfully deleted
          content:
            text/plain:
              schema:
                type: string
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /file/encrypt/{b64key}/{scheme}:
    post:
      summary: Encrypts a file with a specified key and scheme
      parameters:
        - in: path
          name: b64key
          required: false
          schema:
            type: string
        - in: path
          name: scheme
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSimpleFileRequest'
      responses:
        '200':
          description: File successfully encrypted
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /file/decrypt/{b64key}/{scheme}:
    post:
      summary: Decrypts a file with a specified key and scheme
      parameters:
        - in: path
          name: b64key
          required: false
          schema:
            type: string
        - in: path
          name: scheme
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSimpleFileRequest'
      responses:
        '200':
          description: File successfully decrypted
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /hash/Check/{hash}:
    post:
      summary: Checks if the hash of a given file matches the specified hash
      parameters:
        - in: path
          name: hash
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSimpleFileRequest'
      responses:
        '200':
          description: Hash check result
          content:
            text/plain:
              schema:
                type: string
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /hash/Store/:
    post:
      summary: Stores the hash of a given file and the file itself, returns the hash
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSimpleFileRequest'
      responses:
        '200':
          description: Hash successfully stored
          content:
            text/plain:
              schema:
                type: string
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /hash/Get/:
    post:
      summary: Retrieves the hash of a given file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSimpleFileRequest'
      responses:
        '200':
          description: Hash successfully retrieved
          content:
            text/plain:
              schema:
                type: string
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /hash/Retrieve/{userID}/{hash}:
    get:
      summary: Retrieves the stored data for a given hash and userID
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
        - in: path
          name: hash
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data successfully retrieved
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /pwdWallet/Store/{site}/{username}/{password}/{userID}:
    get:
      summary: Stores a password entry for a given site, username, and password
      parameters:
        - in: path
          name: site
          required: true
          schema:
            type: string
        - in: path
          name: username
          required: true
          schema:
            type: string
        - in: path
          name: password
          required: true
          schema:
            type: string
        - in: path
          name: userID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Password entry successfully stored
          content:
            text/plain:
              schema:
                type: string
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /pwdWallet/Retrieve/{site}/{userID}:
    get:
      summary: Retrieves a stored password entry for a given site and userID
      parameters:
        - in: path
          name: site
          required: true
          schema:
            type: string
        - in: path
          name: userID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Password entry successfully retrieved
          content:
            text/plain:
              schema:
                type: string
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /password/Get/{len?}/{digits?}/{case?}/{specialChars?}:
    get:
      summary: "Generate a new password"
      parameters:
        - name: len
          in: path
          description: Length of Password
          required: false
          schema:
            type: int64
        - name: digits
          in: path
          description: Include Numbers in Password?
          required: false
          schema:
            type: boolean
        - name: case
          in: path
          description: Include Capital Letters in Password?
          required: false
          schema:
            type: boolean
        - name: specialChars
          in: path
          description: Include Special Characters in Password?
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example:
                value: "sUJs81Nd01JF3o"
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /passKey/Get/{len?}/{password?}/{salt?}:
    get:
      summary: "Generate new passkey"
      parameters:
        - name: len
          in: path
          description: Length of Passkey
          required: false
          schema:
            type: int64
        - name: password
          in: path
          description: Password to Generate From
          required: false
          schema:
            type: boolean
        - name: salt
          in: path
          description: Cryptographic Salt
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example:
                value: "890750"
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

  /virusChecker/:
    post:
      summary: "Check a file for viruses"
      requestBody:
        description:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Success
          content:
            text/plain:
              examples:
                VirusDetected:
                  value: "File is a known virus. Please delete immediately."
                NoVirusDetected:
                  value: "File did not match any known viruses."
                FileNotFound:
                  value: "File does not exist"
        '502':
          description: Bad Gateway
          content:
            text/plain:
              example: "This had an error"

components:
  schemas:
    WebSimpleFileRequest:
        type: object
        required:
          - contents
          - fileName
        properties:
          contents:
            type: string
            description: The content of the file.
          userID:
            type: string
            nullable: true
            description: The unique identifier of the user. Optional.
          fileName:
            type: string
            description: The name of the file.
        description: Represents a simple file request with content, an optional user ID, and a file name.
